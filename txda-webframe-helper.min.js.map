{
  "version": 3,
  "sources": ["../src/index.ts", "../src/handlers.ts"],
  "sourcesContent": ["import { attachHandlers } from \"./handlers\"\nimport { KeyValueData, TXDAConnection, TXDAMessageHandlers } from \"./types\"\n\n/**\n * Request a connection to the Torx Design-Analyze application that the current page is embedded in.\n * @param url The URL of the Torx Design-Analyze installation that the current page is embedded in. Used to ensure that only messages from the correct origin URL are accepted.\n * @param handlers Event handlers to execute when events are received from Torx Design-Analyze.\n */\nconst initialize = (url: string, handlers: TXDAMessageHandlers = {}): Promise<TXDAConnection> =>\n  new Promise((resolve, reject) => {\n    const origin = new URL(url).origin\n\n    if (origin === '*') {\n      reject('Specific target origins must be specified to connect to TXDA installs')\n      return\n    }\n\n    const handleWindowEvent = (windowEvent: MessageEvent) => {\n      if (windowEvent.data?.messageType === 'txdaMessagePortTransfer') {\n        // Ensure the origin of the message matches the specified URL's origin\n        if (windowEvent.origin !== origin) {\n          reject('Attempted TXDA connection event from unauthorized origin')\n          return\n        }\n\n        // Ensure that the source of the event is the window embedding this one\n        if (windowEvent.source !== window.parent) {\n          reject('Attempted TXDA connection event from unauthorized source')\n          return\n        }\n\n        const port = windowEvent.ports[0]\n\n        // Add any given event handlers to the port\n        attachHandlers(port, handlers)\n\n        port.start()\n\n        // Fire an initial request for the current design as soon as the port starts\n        port.postMessage({ messageType: 'txdaRequestCurrentDesign' })\n\n        const txdaConnection: TXDAConnection = {\n          _port: port,\n          requestCurrentDesign: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesign'\n          }),\n          requestCurrentDesign3d: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesign3d'\n          }),\n          requestCurrentDesignData: () => port.postMessage({\n            messageType: 'txdaRequestCurrentDesignData'\n          }),\n          addCurrentDesignData: (data: KeyValueData) => port.postMessage({\n            messageType: 'txdaAddCurrentDesignData',\n            data\n          }),\n          addCurrentStructureData: (data: KeyValueData) => port.postMessage({\n            messageType: 'txdaAddCurrentStructureData',\n            data\n          }),\n          disconnect: () => {\n            port.close()\n            handlers.onDisconnected?.()\n          }\n        }\n\n        resolve(txdaConnection)\n      }\n    }\n\n    // Listen for events from TXDA for initial setup of MessagePort,\n    // removing the event listener after a single invocation\n    window.addEventListener('message', handleWindowEvent, { once: true })\n\n    window.parent.postMessage({\n      messageType: 'txdaConnectionRequest',\n      windowName: window.name,\n    }, origin)\n\n    // If there's no response from TXDA, reject\n    setTimeout(() => {\n      reject('Connection to TXDA failed (timed out)')\n    }, 10000)\n  })\n\nexport { initialize }\n", "import { Design, DesignData, DesignStructure, Message, TXDAMessageHandlers } from \"./types\"\n\nexport const attachHandlers = (port: MessagePort, handlers: TXDAMessageHandlers) => {\n  if (handlers._message) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<any>>) => {\n      handlers._message?.(portEvent)\n    })\n  }\n\n  if (handlers.onConnected) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<undefined>>) => {\n      if (portEvent.data?.messageType === 'txdaConnectionAcknowledgement') {\n        handlers.onConnected?.(portEvent.data?.metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesign) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<Design>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesign') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesign?.(currentDesign, metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesign3d) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<DesignStructure>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesign3d') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesign3d?.(currentDesign, metaData)\n      }\n    })\n  }\n\n  if (handlers.onUpdateCurrentDesignData) {\n    port.addEventListener('message', (portEvent: MessageEvent<Message<DesignData>>) => {\n      if (portEvent.data?.messageType === 'txdaCurrentDesignData') {\n        const {\n          metaData,\n          data: currentDesign\n        } = portEvent.data\n        handlers.onUpdateCurrentDesignData?.(currentDesign, metaData)\n      }\n    })\n  }\n}\n"],
  "mappings": "kKAAA,iCCEO,GAAM,GAAiB,CAAC,EAAmB,IAAkC,CAClF,AAAI,EAAS,UACX,EAAK,iBAAiB,UAAW,AAAC,GAA0C,CAC1E,EAAS,WAAW,KAIpB,EAAS,aACX,EAAK,iBAAiB,UAAW,AAAC,GAAgD,CAChF,AAAI,EAAU,MAAM,cAAgB,iCAClC,EAAS,cAAc,EAAU,MAAM,YAKzC,EAAS,uBACX,EAAK,iBAAiB,UAAW,AAAC,GAA6C,CAC7E,GAAI,EAAU,MAAM,cAAgB,oBAAqB,CACvD,GAAM,CACJ,WACA,KAAM,GACJ,EAAU,KACd,EAAS,wBAAwB,EAAe,MAKlD,EAAS,yBACX,EAAK,iBAAiB,UAAW,AAAC,GAAsD,CACtF,GAAI,EAAU,MAAM,cAAgB,sBAAuB,CACzD,GAAM,CACJ,WACA,KAAM,GACJ,EAAU,KACd,EAAS,0BAA0B,EAAe,MAKpD,EAAS,2BACX,EAAK,iBAAiB,UAAW,AAAC,GAAiD,CACjF,GAAI,EAAU,MAAM,cAAgB,wBAAyB,CAC3D,GAAM,CACJ,WACA,KAAM,GACJ,EAAU,KACd,EAAS,4BAA4B,EAAe,ODxC5D,GAAM,GAAa,CAAC,EAAa,EAAgC,KAC/D,GAAI,SAAQ,CAAC,EAAS,IAAW,CAC/B,GAAM,GAAS,GAAI,KAAI,GAAK,OAE5B,GAAI,IAAW,IAAK,CAClB,EAAO,yEACP,OAGF,GAAM,GAAoB,AAAC,GAA8B,CACvD,GAAI,EAAY,MAAM,cAAgB,0BAA2B,CAE/D,GAAI,EAAY,SAAW,EAAQ,CACjC,EAAO,4DACP,OAIF,GAAI,EAAY,SAAW,OAAO,OAAQ,CACxC,EAAO,4DACP,OAGF,GAAM,GAAO,EAAY,MAAM,GAG/B,EAAe,EAAM,GAErB,EAAK,QAGL,EAAK,YAAY,CAAE,YAAa,6BA2BhC,EAzBuC,CACrC,MAAO,EACP,qBAAsB,IAAM,EAAK,YAAY,CAC3C,YAAa,6BAEf,uBAAwB,IAAM,EAAK,YAAY,CAC7C,YAAa,+BAEf,yBAA0B,IAAM,EAAK,YAAY,CAC/C,YAAa,iCAEf,qBAAsB,AAAC,GAAuB,EAAK,YAAY,CAC7D,YAAa,2BACb,SAEF,wBAAyB,AAAC,GAAuB,EAAK,YAAY,CAChE,YAAa,8BACb,SAEF,WAAY,IAAM,CAChB,EAAK,QACL,EAAS,wBAUjB,OAAO,iBAAiB,UAAW,EAAmB,CAAE,KAAM,KAE9D,OAAO,OAAO,YAAY,CACxB,YAAa,wBACb,WAAY,OAAO,MAClB,GAGH,WAAW,IAAM,CACf,EAAO,0CACN",
  "names": []
}
